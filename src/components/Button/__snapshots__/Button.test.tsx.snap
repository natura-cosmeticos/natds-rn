// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Button component Disabled variants should render disabled button component contained 1`] = `
<View
  accessible={true}
  focusable={true}
  hideOverflow={true}
  onClick={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    Array [
      Object {
        "overflow": "hidden",
      },
    ]
  }
  testID="touchable-ripple"
>
  <View
    disabled={true}
    onLayout={[Function]}
    size="medium"
    style={
      Array [
        Object {
          "alignContent": "center",
          "alignItems": "center",
          "backgroundColor": "#bbbbbb",
          "borderRadius": 4,
          "flexDirection": "row",
          "justifyContent": "center",
          "minHeight": 40,
          "paddingHorizontal": 12,
        },
        Object {},
      ]
    }
    testID="button"
    type="contained"
  >
    <Text
      accessibilityRole="button"
      disabled={true}
      style={
        Array [
          Object {
            "alignSelf": "center",
            "color": "#333333",
            "fontSize": 14,
            "fontWeight": "bold",
            "letterSpacing": 1,
          },
        ]
      }
      textColor="default"
      type="contained"
    >
      LABEL BUTTON
    </Text>
  </View>
  <View
    color="highlight"
    size={0}
    style={
      Object {
        "backgroundColor": "#000000",
        "borderRadius": 0,
        "elevation": 999,
        "height": 0,
        "left": "50%",
        "opacity": 0,
        "position": "absolute",
        "top": "50%",
        "transform": Array [
          Object {
            "translateX": -0,
          },
          Object {
            "translateY": -0,
          },
          Object {
            "scale": 0,
          },
        ],
        "width": 0,
        "zIndex": 999,
      }
    }
  />
</View>
`;

exports[`Button component Disabled variants should render disabled button component outlined 1`] = `
<View
  accessible={true}
  focusable={true}
  hideOverflow={true}
  onClick={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    Array [
      Object {
        "overflow": "hidden",
      },
    ]
  }
  testID="touchable-ripple"
>
  <View
    disabled={true}
    onLayout={[Function]}
    size="medium"
    style={
      Array [
        Object {
          "alignContent": "center",
          "alignItems": "center",
          "borderColor": "#777777",
          "borderRadius": 4,
          "borderWidth": 1,
          "flexDirection": "row",
          "justifyContent": "center",
          "minHeight": 40,
          "paddingHorizontal": 12,
        },
        Object {},
      ]
    }
    testID="button"
    type="outlined"
  >
    <Text
      accessibilityRole="button"
      disabled={true}
      style={
        Array [
          Object {
            "alignSelf": "center",
            "color": "#777777",
            "fontSize": 14,
            "fontWeight": "bold",
            "letterSpacing": 1,
          },
        ]
      }
      textColor="default"
      type="outlined"
    >
      LABEL BUTTON
    </Text>
  </View>
  <View
    color="highlight"
    size={0}
    style={
      Object {
        "backgroundColor": "#000000",
        "borderRadius": 0,
        "elevation": 999,
        "height": 0,
        "left": "50%",
        "opacity": 0,
        "position": "absolute",
        "top": "50%",
        "transform": Array [
          Object {
            "translateX": -0,
          },
          Object {
            "translateY": -0,
          },
          Object {
            "scale": 0,
          },
        ],
        "width": 0,
        "zIndex": 999,
      }
    }
  />
</View>
`;

exports[`Button component Disabled variants should render disabled button component text 1`] = `
<View
  accessible={true}
  focusable={true}
  hideOverflow={true}
  onClick={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    Array [
      Object {
        "overflow": "hidden",
      },
    ]
  }
  testID="touchable-ripple"
>
  <View
    disabled={true}
    onLayout={[Function]}
    size="medium"
    style={
      Array [
        Object {
          "alignContent": "center",
          "alignItems": "center",
          "borderRadius": 4,
          "flexDirection": "row",
          "justifyContent": "center",
          "minHeight": 40,
          "paddingHorizontal": 12,
        },
        Object {},
      ]
    }
    testID="button"
    type="text"
  >
    <Text
      accessibilityRole="button"
      disabled={true}
      style={
        Array [
          Object {
            "alignSelf": "center",
            "color": "#777777",
            "fontSize": 14,
            "fontWeight": "bold",
            "letterSpacing": 1,
          },
        ]
      }
      textColor="default"
      type="text"
    >
      LABEL BUTTON
    </Text>
  </View>
  <View
    color="highlight"
    size={0}
    style={
      Object {
        "backgroundColor": "#000000",
        "borderRadius": 0,
        "elevation": 999,
        "height": 0,
        "left": "50%",
        "opacity": 0,
        "position": "absolute",
        "top": "50%",
        "transform": Array [
          Object {
            "translateX": -0,
          },
          Object {
            "translateY": -0,
          },
          Object {
            "scale": 0,
          },
        ],
        "width": 0,
        "zIndex": 999,
      }
    }
  />
</View>
`;

exports[`Button component Variants should render button component contained 1`] = `
<View
  accessible={true}
  focusable={true}
  hideOverflow={true}
  onClick={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    Array [
      Object {
        "overflow": "hidden",
      },
    ]
  }
  testID="touchable-ripple"
>
  <View
    disabled={false}
    onLayout={[Function]}
    size="medium"
    style={
      Array [
        Object {
          "alignContent": "center",
          "alignItems": "center",
          "backgroundColor": "#f4ab34",
          "borderRadius": 4,
          "flexDirection": "row",
          "justifyContent": "center",
          "minHeight": 40,
          "paddingHorizontal": 12,
        },
        Object {
          "elevation": 2,
          "shadowColor": "#000000",
          "shadowOffset": Object {
            "height": 2,
            "width": 0,
          },
          "shadowOpacity": 0.14,
          "shadowRadius": 2,
        },
      ]
    }
    testID="button"
    type="contained"
  >
    <Text
      accessibilityRole="button"
      disabled={false}
      style={
        Array [
          Object {
            "alignSelf": "center",
            "color": "#333333",
            "fontSize": 14,
            "fontWeight": "bold",
            "letterSpacing": 1,
          },
        ]
      }
      textColor="default"
      type="contained"
    >
      LABEL BUTTON
    </Text>
  </View>
  <View
    color="highlight"
    size={0}
    style={
      Object {
        "backgroundColor": "#000000",
        "borderRadius": 0,
        "elevation": 999,
        "height": 0,
        "left": "50%",
        "opacity": 0,
        "position": "absolute",
        "top": "50%",
        "transform": Array [
          Object {
            "translateX": -0,
          },
          Object {
            "translateY": -0,
          },
          Object {
            "scale": 0,
          },
        ],
        "width": 0,
        "zIndex": 999,
      }
    }
  />
</View>
`;

exports[`Button component Variants should render button component outlined 1`] = `
<View
  accessible={true}
  focusable={true}
  hideOverflow={true}
  onClick={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    Array [
      Object {
        "overflow": "hidden",
      },
    ]
  }
  testID="touchable-ripple"
>
  <View
    disabled={false}
    onLayout={[Function]}
    size="medium"
    style={
      Array [
        Object {
          "alignContent": "center",
          "alignItems": "center",
          "borderColor": "#f4ab34",
          "borderRadius": 4,
          "borderWidth": 1,
          "flexDirection": "row",
          "justifyContent": "center",
          "minHeight": 40,
          "paddingHorizontal": 12,
        },
        Object {},
      ]
    }
    testID="button"
    type="outlined"
  >
    <Text
      accessibilityRole="button"
      disabled={false}
      style={
        Array [
          Object {
            "alignSelf": "center",
            "color": "#333333",
            "fontSize": 14,
            "fontWeight": "bold",
            "letterSpacing": 1,
          },
        ]
      }
      textColor="default"
      type="outlined"
    >
      LABEL BUTTON
    </Text>
  </View>
  <View
    color="highlight"
    size={0}
    style={
      Object {
        "backgroundColor": "#000000",
        "borderRadius": 0,
        "elevation": 999,
        "height": 0,
        "left": "50%",
        "opacity": 0,
        "position": "absolute",
        "top": "50%",
        "transform": Array [
          Object {
            "translateX": -0,
          },
          Object {
            "translateY": -0,
          },
          Object {
            "scale": 0,
          },
        ],
        "width": 0,
        "zIndex": 999,
      }
    }
  />
</View>
`;

exports[`Button component Variants should render button component text 1`] = `
<View
  accessible={true}
  focusable={true}
  hideOverflow={true}
  onClick={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    Array [
      Object {
        "overflow": "hidden",
      },
    ]
  }
  testID="touchable-ripple"
>
  <View
    disabled={false}
    onLayout={[Function]}
    size="medium"
    style={
      Array [
        Object {
          "alignContent": "center",
          "alignItems": "center",
          "borderRadius": 4,
          "flexDirection": "row",
          "justifyContent": "center",
          "minHeight": 40,
          "paddingHorizontal": 12,
        },
        Object {},
      ]
    }
    testID="button"
    type="text"
  >
    <Text
      accessibilityRole="button"
      disabled={false}
      style={
        Array [
          Object {
            "alignSelf": "center",
            "color": "#333333",
            "fontSize": 14,
            "fontWeight": "bold",
            "letterSpacing": 1,
          },
        ]
      }
      textColor="default"
      type="text"
    >
      LABEL BUTTON
    </Text>
  </View>
  <View
    color="highlight"
    size={0}
    style={
      Object {
        "backgroundColor": "#000000",
        "borderRadius": 0,
        "elevation": 999,
        "height": 0,
        "left": "50%",
        "opacity": 0,
        "position": "absolute",
        "top": "50%",
        "transform": Array [
          Object {
            "translateX": -0,
          },
          Object {
            "translateY": -0,
          },
          Object {
            "scale": 0,
          },
        ],
        "width": 0,
        "zIndex": 999,
      }
    }
  />
</View>
`;
